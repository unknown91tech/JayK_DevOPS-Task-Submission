# .gitlab-ci.yml
stages:
  - test
  - security
  - build
  - package
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  POSTGRES_DB: test_db
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_URL: postgresql://postgres:postgres@postgres:5432/test_db

.node_template: &node_template
  image: node:18-alpine
  cache:
    key: 
      files:
        - package-lock.json
    paths:
      - node_modules/
  before_script:
    - npm ci
    - npx prisma generate

lint_and_test:
  <<: *node_template
  stage: test
  services:
    - postgres:15-alpine
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  script:
    - npx prisma migrate deploy
    - npm run lint
    - npm run prettier:check
    - npm run type-check
    - npm run test:unit
    - npm run test:integration
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      junit: test-results/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week

security_scan:
  stage: security
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - trivy fs --exit-code 1 --severity HIGH,CRITICAL .
    - trivy fs --format json --output trivy-report.json .
  artifacts:
    reports:
      security:
        - trivy-report.json
    expire_in: 1 week
  allow_failure: true

npm_audit:
  <<: *node_template
  stage: security
  script:
    - npm audit --audit-level moderate
  allow_failure: true

build_app:
  <<: *node_template
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - .next/
      - public/
    expire_in: 1 hour

docker_build:
  stage: package
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - |
      docker build \
        --cache-from $CI_REGISTRY_IMAGE:cache \
        --tag $IMAGE_TAG \
        --tag $CI_REGISTRY_IMAGE:latest \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        .
    - docker push $IMAGE_TAG
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker tag $IMAGE_TAG $CI_REGISTRY_IMAGE:cache
    - docker push $CI_REGISTRY_IMAGE:cache
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

deploy_staging:
  stage: deploy
  image: alpine/k8s:1.28.2
  environment:
    name: staging
    url: https://staging.yourapp.com
  before_script:
    - echo "$KUBECONFIG_STAGING" | base64 -d > kubeconfig
    - export KUBECONFIG=kubeconfig
  script:
    - sed -i "s|IMAGE_TAG|$CI_COMMIT_SHA|g" infrastructure/kubernetes/deployment.yml
    - kubectl apply -f infrastructure/kubernetes/ -n staging
    - kubectl rollout status deployment/nextjs-auth-app -n staging --timeout=300s
    - |
      echo "Deployment successful!"
      echo "Application URL: https://staging.yourapp.com"
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

deploy_production:
  stage: deploy
  image: alpine/k8s:1.28.2
  environment:
    name: production
    url: https://yourapp.com
  before_script:
    - echo "$KUBECONFIG_PRODUCTION" | base64 -d > kubeconfig
    - export KUBECONFIG=kubeconfig
  script:
    - sed -i "s|IMAGE_TAG|$CI_COMMIT_SHA|g" infrastructure/kubernetes/deployment.yml
    - kubectl apply -f infrastructure/kubernetes/ -n production
    - kubectl rollout status deployment/nextjs-auth-app -n production --timeout=300s
    - |
      echo "Production deployment successful!"
      echo "Application URL: https://yourapp.com"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual

# Rollback job
rollback_production:
  stage: deploy
  image: alpine/k8s:1.28.2
  environment:
    name: production
    url: https://yourapp.com
  before_script:
    - echo "$KUBECONFIG_PRODUCTION" | base64 -d > kubeconfig
    - export KUBECONFIG=kubeconfig
  script:
    - kubectl rollout undo deployment/nextjs-auth-app -n production
    - kubectl rollout status deployment/nextjs-auth-app -n production --timeout=300s
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual